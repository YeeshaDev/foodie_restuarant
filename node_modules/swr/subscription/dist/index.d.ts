import { Key, SWRConfiguration, Middleware } from 'swr';

type SWRSubscription<Data = any, Error = any> = (key: Key, { next }: {
    next: (err?: Error | null, data?: Data) => void;
}) => () => void;
type SWRSubscriptionResponse<Data = any, Error = any> = {
    data?: Data;
    error?: Error;
};
type SWRSubscriptionHook<Data = any, Error = any> = (key: Key, subscribe: SWRSubscription<Data, Error>, config?: SWRConfiguration) => SWRSubscriptionResponse<Data, Error>;
declare const subscription: Middleware;
/**
 * A hook to subscribe a SWR resource to an external data source for continuous updates.
 * @experimental This API is experimental and might change in the future.
 * @example
 * ```jsx
 * import useSWRSubscription from 'swr/subscription'
 *
 * const { data, error } = useSWRSubscription(key, (key, { next }) => {
 *   const unsubscribe = dataSource.subscribe(key, (err, data) => {
 *     next(err, data)
 *   })
 *   return unsubscribe
 * })
 * ```
 */
declare const useSWRSubscription: SWRSubscriptionHook<any, any>;

export { SWRSubscription, SWRSubscriptionHook, SWRSubscriptionResponse, useSWRSubscription as default, subscription };
